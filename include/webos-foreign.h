/* Generated by wayland-scanner 1.11.0 */

#ifndef WEBOS_FOREIGN_CLIENT_PROTOCOL_H
#define WEBOS_FOREIGN_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_webos_foreign The webos_foreign protocol
 * @section page_ifaces_webos_foreign Interfaces
 * - @subpage page_iface_wl_webos_foreign - interface for handling foreign surfaces
 * - @subpage page_iface_wl_webos_exported - interface for handling exported window
 * - @subpage page_iface_wl_webos_imported - interface for imported content or punchthrough region
 * @section page_copyright_webos_foreign Copyright
 * <pre>
 *
 * Copyright (c) 2018-2019 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * </pre>
 */
struct wl_region;
struct wl_surface;
struct wl_webos_exported;
struct wl_webos_foreign;
struct wl_webos_imported;

/**
 * @page page_iface_wl_webos_foreign wl_webos_foreign
 * @section page_iface_wl_webos_foreign_desc Description
 *
 * This interface defines a way to associate one or more foreign surfaces from
 * different clients or a punch-through region to a surface that acts the main
 * window.
 *
 * You can set a region on the main window where a foreign surface or a
 * punch-through region can be placed. It is called "exported" region or window
 * in this protocol. Then you can request the compositor to punch through that
 * region or attach another surface as an "imported" content.
 * @section page_iface_wl_webos_foreign_api API
 * See @ref iface_wl_webos_foreign.
 */
/**
 * @defgroup iface_wl_webos_foreign The wl_webos_foreign interface
 *
 * This interface defines a way to associate one or more foreign surfaces from
 * different clients or a punch-through region to a surface that acts the main
 * window.
 *
 * You can set a region on the main window where a foreign surface or a
 * punch-through region can be placed. It is called "exported" region or window
 * in this protocol. Then you can request the compositor to punch through that
 * region or attach another surface as an "imported" content.
 */
extern const struct wl_interface wl_webos_foreign_interface;
/**
 * @page page_iface_wl_webos_exported wl_webos_exported
 * @section page_iface_wl_webos_exported_desc Description
 *
 * This interface defines operations and notifications on an exported window.
 * @section page_iface_wl_webos_exported_api API
 * See @ref iface_wl_webos_exported.
 */
/**
 * @defgroup iface_wl_webos_exported The wl_webos_exported interface
 *
 * This interface defines operations and notifications on an exported window.
 */
extern const struct wl_interface wl_webos_exported_interface;
/**
 * @page page_iface_wl_webos_imported wl_webos_imported
 * @section page_iface_wl_webos_imported_desc Description
 *
 * This interface defines operations and notifications on an imported object.
 * @section page_iface_wl_webos_imported_api API
 * See @ref iface_wl_webos_imported.
 */
/**
 * @defgroup iface_wl_webos_imported The wl_webos_imported interface
 *
 * This interface defines operations and notifications on an imported object.
 */
extern const struct wl_interface wl_webos_imported_interface;

#ifndef WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_ENUM
#define WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_ENUM
/**
 * @ingroup iface_wl_webos_foreign
 * type of webos_exported
 *
 * This indicates the type of the content that the exported window can show.
 */
enum wl_webos_foreign_webos_exported_type {
	/**
	 * exported window for video object
	 */
	WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_VIDEO_OBJECT = 0,
	/**
	 * exported window for subtitle object
	 */
	WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_SUBTITLE_OBJECT = 1,
	/**
	 * exported window for transparent object that does not need to punch through other windows
	 */
	WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_TRANSPARENT_OBJECT = 2,
	/**
	 * exported window for opaque object that always needs to punch through other windows
	 */
	WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_OPAQUE_OBJECT = 3,
};
#endif /* WL_WEBOS_FOREIGN_WEBOS_EXPORTED_TYPE_ENUM */

#define WL_WEBOS_FOREIGN_DESTROY	0
#define WL_WEBOS_FOREIGN_EXPORT_ELEMENT	1
#define WL_WEBOS_FOREIGN_IMPORT_ELEMENT	2

/**
 * @ingroup iface_wl_webos_foreign
 */
#define WL_WEBOS_FOREIGN_DESTROY_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_foreign
 */
#define WL_WEBOS_FOREIGN_EXPORT_ELEMENT_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_foreign
 */
#define WL_WEBOS_FOREIGN_IMPORT_ELEMENT_SINCE_VERSION	1

/** @ingroup iface_wl_webos_foreign */
static inline void
wl_webos_foreign_set_user_data(struct wl_webos_foreign *wl_webos_foreign, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_foreign, user_data);
}

/** @ingroup iface_wl_webos_foreign */
static inline void *
wl_webos_foreign_get_user_data(struct wl_webos_foreign *wl_webos_foreign)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_foreign);
}

static inline uint32_t
wl_webos_foreign_get_version(struct wl_webos_foreign *wl_webos_foreign)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_foreign);
}

/**
 * @ingroup iface_wl_webos_foreign
 *
 * Destroys the foreign object.
 */
static inline void
wl_webos_foreign_destroy(struct wl_webos_foreign *wl_webos_foreign)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_foreign,
			 WL_WEBOS_FOREIGN_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) wl_webos_foreign);
}

/**
 * @ingroup iface_wl_webos_foreign
 *
 * Requests to create an exported window on a given surface.
 */
static inline struct wl_webos_exported *
wl_webos_foreign_export_element(struct wl_webos_foreign *wl_webos_foreign, struct wl_surface *surface, uint32_t exported_type)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_webos_foreign,
			 WL_WEBOS_FOREIGN_EXPORT_ELEMENT, &wl_webos_exported_interface, NULL, surface, exported_type);

	return (struct wl_webos_exported *) id;
}

/**
 * @ingroup iface_wl_webos_foreign
 *
 * Requests an import object that can be associated with a given exported window.
 */
static inline struct wl_webos_imported *
wl_webos_foreign_import_element(struct wl_webos_foreign *wl_webos_foreign, const char *window_id, uint32_t exported_type)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_webos_foreign,
			 WL_WEBOS_FOREIGN_IMPORT_ELEMENT, &wl_webos_imported_interface, NULL, window_id, exported_type);

	return (struct wl_webos_imported *) id;
}

/**
 * @ingroup iface_wl_webos_exported
 * @struct wl_webos_exported_listener
 */
struct wl_webos_exported_listener {
	/**
	 * window is associated with this wl_webos_exported
	 *
	 * Notifies window_id of the exported window.
	 * @param window_id window_id of associated exported window
	 */
	void (*window_id_assigned)(void *data,
				   struct wl_webos_exported *wl_webos_exported,
				   const char *window_id,
				   uint32_t exported_type);
};

/**
 * @ingroup wl_webos_exported_iface
 */
static inline int
wl_webos_exported_add_listener(struct wl_webos_exported *wl_webos_exported,
			       const struct wl_webos_exported_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_exported,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_EXPORTED_DESTROY	0
#define WL_WEBOS_EXPORTED_SET_EXPORTED_WINDOW	1
#define WL_WEBOS_EXPORTED_SET_CROP_REGION	2
#define WL_WEBOS_EXPORTED_SET_PROPERTY	3

/**
 * @ingroup iface_wl_webos_exported
 */
#define WL_WEBOS_EXPORTED_DESTROY_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_exported
 */
#define WL_WEBOS_EXPORTED_SET_EXPORTED_WINDOW_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_exported
 */
#define WL_WEBOS_EXPORTED_SET_CROP_REGION_SINCE_VERSION	2
/**
 * @ingroup iface_wl_webos_exported
 */
#define WL_WEBOS_EXPORTED_SET_PROPERTY_SINCE_VERSION	2

/** @ingroup iface_wl_webos_exported */
static inline void
wl_webos_exported_set_user_data(struct wl_webos_exported *wl_webos_exported, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_exported, user_data);
}

/** @ingroup iface_wl_webos_exported */
static inline void *
wl_webos_exported_get_user_data(struct wl_webos_exported *wl_webos_exported)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_exported);
}

static inline uint32_t
wl_webos_exported_get_version(struct wl_webos_exported *wl_webos_exported)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_exported);
}

/**
 * @ingroup iface_wl_webos_exported
 *
 * Destroys the exported object.
 */
static inline void
wl_webos_exported_destroy(struct wl_webos_exported *wl_webos_exported)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_exported,
			 WL_WEBOS_EXPORTED_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) wl_webos_exported);
}

/**
 * @ingroup iface_wl_webos_exported
 *
 * Sets the exported window with source and destination regions.
 */
static inline void
wl_webos_exported_set_exported_window(struct wl_webos_exported *wl_webos_exported, struct wl_region *source_region, struct wl_region *destination_region)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_exported,
			 WL_WEBOS_EXPORTED_SET_EXPORTED_WINDOW, source_region, destination_region);
}

/**
 * @ingroup iface_wl_webos_exported
 *
 * Sets a region to be cropped.
 */
static inline void
wl_webos_exported_set_crop_region(struct wl_webos_exported *wl_webos_exported, struct wl_region *original_input, struct wl_region *source_region, struct wl_region *destination_region)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_exported,
			 WL_WEBOS_EXPORTED_SET_CROP_REGION, original_input, source_region, destination_region);
}

/**
 * @ingroup iface_wl_webos_exported
 *
 * Sets a property for this webos_exported. The property is given by a string pair (name, value).
 */
static inline void
wl_webos_exported_set_property(struct wl_webos_exported *wl_webos_exported, const char *name, const char *value)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_exported,
			 WL_WEBOS_EXPORTED_SET_PROPERTY, name, value);
}

#ifndef WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_ENUM
#define WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_ENUM
/**
 * @ingroup iface_wl_webos_imported
 * surface alignment
 *
 * The alignment of an imported surface on the associated exported window.
 */
enum wl_webos_imported_surface_alignment {
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_STRETCH = 0,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_NORTH = 1,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_WEST = 2,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_SOUTH = 4,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_EAST = 8,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_CENTER = 16,
	WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_CROP = 32,
};
#endif /* WL_WEBOS_IMPORTED_SURFACE_ALIGNMENT_ENUM */

/**
 * @ingroup iface_wl_webos_imported
 * @struct wl_webos_imported_listener
 */
struct wl_webos_imported_listener {
	/**
	 * destination region changed
	 *
	 * Notifies the change of the destination region of associated
	 * exported window.
	 * @param width destination width of exported window
	 * @param height destination height of exported window
	 */
	void (*destination_region_changed)(void *data,
					   struct wl_webos_imported *wl_webos_imported,
					   uint32_t width,
					   uint32_t height);
	/**
	 * punchthrough attached
	 *
	 * Notifies that a punchthrough is attached to webos_imported.
	 * @since 2
	 */
	void (*punchthrough_attached)(void *data,
				      struct wl_webos_imported *wl_webos_imported,
				      const char *context_id);
	/**
	 * punchthrough detached
	 *
	 * Notifies that a punchthrough is detached from webos_imported.
	 * @since 2
	 */
	void (*punchthrough_detached)(void *data,
				      struct wl_webos_imported *wl_webos_imported,
				      const char *context_id);
	/**
	 * surface attached
	 *
	 * Notifies that a surface is attached to webos_imported.
	 * @since 2
	 */
	void (*surface_attached)(void *data,
				 struct wl_webos_imported *wl_webos_imported,
				 struct wl_surface *surface);
	/**
	 * surface detached
	 *
	 * Notifies that a surface is detached from webos_imported.
	 * @since 2
	 */
	void (*surface_detached)(void *data,
				 struct wl_webos_imported *wl_webos_imported,
				 struct wl_surface *surface);
};

/**
 * @ingroup wl_webos_imported_iface
 */
static inline int
wl_webos_imported_add_listener(struct wl_webos_imported *wl_webos_imported,
			       const struct wl_webos_imported_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_imported,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_IMPORTED_SET_SURFACE_ALIGNMENT	0
#define WL_WEBOS_IMPORTED_DESTROY	1
#define WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH	2
#define WL_WEBOS_IMPORTED_DETACH_PUNCHTHROUGH	3
#define WL_WEBOS_IMPORTED_ATTACH_SURFACE	4
#define WL_WEBOS_IMPORTED_DETACH_SURFACE	5
#define WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH_WITH_CONTEXT	6
#define WL_WEBOS_IMPORTED_SET_Z_INDEX	7

/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_SET_SURFACE_ALIGNMENT_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_DESTROY_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_DETACH_PUNCHTHROUGH_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_ATTACH_SURFACE_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_DETACH_SURFACE_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH_WITH_CONTEXT_SINCE_VERSION	2
/**
 * @ingroup iface_wl_webos_imported
 */
#define WL_WEBOS_IMPORTED_SET_Z_INDEX_SINCE_VERSION	2

/** @ingroup iface_wl_webos_imported */
static inline void
wl_webos_imported_set_user_data(struct wl_webos_imported *wl_webos_imported, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_imported, user_data);
}

/** @ingroup iface_wl_webos_imported */
static inline void *
wl_webos_imported_get_user_data(struct wl_webos_imported *wl_webos_imported)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_imported);
}

static inline uint32_t
wl_webos_imported_get_version(struct wl_webos_imported *wl_webos_imported)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_imported);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Sets the alignment of the imported surface.
 */
static inline void
wl_webos_imported_set_surface_alignment(struct wl_webos_imported *wl_webos_imported, uint32_t format)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_SET_SURFACE_ALIGNMENT, format);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Destroys the imported object.
 */
static inline void
wl_webos_imported_destroy(struct wl_webos_imported *wl_webos_imported)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) wl_webos_imported);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Requests a punch-through on the exporetd window associated with
 * this import object.
 */
static inline void
wl_webos_imported_attach_punchthrough(struct wl_webos_imported *wl_webos_imported)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Requests to detatch the punch-through from the exported window
 * associated with this import object.
 */
static inline void
wl_webos_imported_detach_punchthrough(struct wl_webos_imported *wl_webos_imported)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_DETACH_PUNCHTHROUGH);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Requests to attach the surface as imported to the associated
 * exported window.
 */
static inline void
wl_webos_imported_attach_surface(struct wl_webos_imported *wl_webos_imported, struct wl_surface *surface)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_ATTACH_SURFACE, surface);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Requests to detach the surface as imported from the associated
 * exported window.
 */
static inline void
wl_webos_imported_detach_surface(struct wl_webos_imported *wl_webos_imported, struct wl_surface *surface)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_DETACH_SURFACE, surface);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Requests a punch-through on the exporetd window associated with
 * this import object for a given context id.
 */
static inline void
wl_webos_imported_attach_punchthrough_with_context(struct wl_webos_imported *wl_webos_imported, const char *context_id)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_ATTACH_PUNCHTHROUGH_WITH_CONTEXT, context_id);
}

/**
 * @ingroup iface_wl_webos_imported
 *
 * Set the z index for webos_imported. The compositor will move the surface,
 * that is attached to webos_imported, to this layer. If no surface is attached to
 * webos_imported, nothing will happen.
 */
static inline void
wl_webos_imported_set_z_index(struct wl_webos_imported *wl_webos_imported, int32_t z_index)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_imported,
			 WL_WEBOS_IMPORTED_SET_Z_INDEX, z_index);
}

#ifdef  __cplusplus
}
#endif

#endif
