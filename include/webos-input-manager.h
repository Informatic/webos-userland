/* Generated by wayland-scanner 1.11.0 */

#ifndef WEBOS_INPUT_MANAGER_CLIENT_PROTOCOL_H
#define WEBOS_INPUT_MANAGER_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_webos_input_manager The webos_input_manager protocol
 * @section page_ifaces_webos_input_manager Interfaces
 * - @subpage page_iface_wl_webos_input_manager - get additional input interface
 * - @subpage page_iface_wl_webos_seat - interface for additional input data
 * - @subpage page_iface_wl_webos_gyroscope - interface for gyroscope device
 * - @subpage page_iface_wl_webos_accelerometer - interface for accelerometer device
 * @section page_copyright_webos_input_manager Copyright
 * <pre>
 *
 * Copyright (c) 2014-2020 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * </pre>
 */
struct wl_seat;
struct wl_webos_accelerometer;
struct wl_webos_gyroscope;
struct wl_webos_input_manager;
struct wl_webos_seat;

/**
 * @page page_iface_wl_webos_input_manager wl_webos_input_manager
 * @section page_iface_wl_webos_input_manager_desc Description
 *
 * wl_webos_seat has more information than wl_seat. User can get it using
 * get_webos_seat(seat).
 * @section page_iface_wl_webos_input_manager_api API
 * See @ref iface_wl_webos_input_manager.
 */
/**
 * @defgroup iface_wl_webos_input_manager The wl_webos_input_manager interface
 *
 * wl_webos_seat has more information than wl_seat. User can get it using
 * get_webos_seat(seat).
 */
extern const struct wl_interface wl_webos_input_manager_interface;
/**
 * @page page_iface_wl_webos_seat wl_webos_seat
 * @section page_iface_wl_webos_seat_desc Description
 *
 * This is a webOS extension for additional input data such as gyroscope or
 * accelerometer. If the seat has additional input data, user can request it
 * using get_*.
 * @section page_iface_wl_webos_seat_api API
 * See @ref iface_wl_webos_seat.
 */
/**
 * @defgroup iface_wl_webos_seat The wl_webos_seat interface
 *
 * This is a webOS extension for additional input data such as gyroscope or
 * accelerometer. If the seat has additional input data, user can request it
 * using get_*.
 */
extern const struct wl_interface wl_webos_seat_interface;
/**
 * @page page_iface_wl_webos_gyroscope wl_webos_gyroscope
 * @section page_iface_wl_webos_gyroscope_desc Description
 *
 * This is an interface for gyroscope device.
 * @section page_iface_wl_webos_gyroscope_api API
 * See @ref iface_wl_webos_gyroscope.
 */
/**
 * @defgroup iface_wl_webos_gyroscope The wl_webos_gyroscope interface
 *
 * This is an interface for gyroscope device.
 */
extern const struct wl_interface wl_webos_gyroscope_interface;
/**
 * @page page_iface_wl_webos_accelerometer wl_webos_accelerometer
 * @section page_iface_wl_webos_accelerometer_desc Description
 *
 * This is an interface for accelerometer device.
 * @section page_iface_wl_webos_accelerometer_api API
 * See @ref iface_wl_webos_accelerometer.
 */
/**
 * @defgroup iface_wl_webos_accelerometer The wl_webos_accelerometer interface
 *
 * This is an interface for accelerometer device.
 */
extern const struct wl_interface wl_webos_accelerometer_interface;

/**
 * @ingroup iface_wl_webos_input_manager
 * @struct wl_webos_input_manager_listener
 */
struct wl_webos_input_manager_listener {
	/**
	 * current cursor visibility
	 *
	 * If the current cursor visibility is chagned, notify it.
	 * @param visibility boolean vaule for visibility of current cursor
	 * @param webos_seat webos_seat cursor visibility changed, if this value is Null All cursors are hidden
	 */
	void (*cursor_visibility)(void *data,
				  struct wl_webos_input_manager *wl_webos_input_manager,
				  uint32_t visibility,
				  struct wl_webos_seat *webos_seat);
};

/**
 * @ingroup wl_webos_input_manager_iface
 */
static inline int
wl_webos_input_manager_add_listener(struct wl_webos_input_manager *wl_webos_input_manager,
				    const struct wl_webos_input_manager_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_input_manager,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_INPUT_MANAGER_GET_WEBOS_SEAT	0
#define WL_WEBOS_INPUT_MANAGER_SET_CURSOR_VISIBILITY	1

/**
 * @ingroup iface_wl_webos_input_manager
 */
#define WL_WEBOS_INPUT_MANAGER_GET_WEBOS_SEAT_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_input_manager
 */
#define WL_WEBOS_INPUT_MANAGER_SET_CURSOR_VISIBILITY_SINCE_VERSION	1

/** @ingroup iface_wl_webos_input_manager */
static inline void
wl_webos_input_manager_set_user_data(struct wl_webos_input_manager *wl_webos_input_manager, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_input_manager, user_data);
}

/** @ingroup iface_wl_webos_input_manager */
static inline void *
wl_webos_input_manager_get_user_data(struct wl_webos_input_manager *wl_webos_input_manager)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_input_manager);
}

static inline uint32_t
wl_webos_input_manager_get_version(struct wl_webos_input_manager *wl_webos_input_manager)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_input_manager);
}

/** @ingroup iface_wl_webos_input_manager */
static inline void
wl_webos_input_manager_destroy(struct wl_webos_input_manager *wl_webos_input_manager)
{
	wl_proxy_destroy((struct wl_proxy *) wl_webos_input_manager);
}

/**
 * @ingroup iface_wl_webos_input_manager
 *
 * Returns a webos_seat associated with the seat.
 */
static inline struct wl_webos_seat *
wl_webos_input_manager_get_webos_seat(struct wl_webos_input_manager *wl_webos_input_manager, struct wl_seat *seat)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_webos_input_manager,
			 WL_WEBOS_INPUT_MANAGER_GET_WEBOS_SEAT, &wl_webos_seat_interface, NULL, seat);

	return (struct wl_webos_seat *) id;
}

/**
 * @ingroup iface_wl_webos_input_manager
 *
 * Sets the cursor visibility.
 */
static inline void
wl_webos_input_manager_set_cursor_visibility(struct wl_webos_input_manager *wl_webos_input_manager, uint32_t visibility)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_input_manager,
			 WL_WEBOS_INPUT_MANAGER_SET_CURSOR_VISIBILITY, visibility);
}

#ifndef WL_WEBOS_SEAT_CAPABILITY_ENUM
#define WL_WEBOS_SEAT_CAPABILITY_ENUM
/**
 * @ingroup iface_wl_webos_seat
 * webos seat capability bitmask
 *
 * This is a bitmask of capabilities this webOS seat has; if a member is
 * set, then it is present on the seat.
 */
enum wl_webos_seat_capability {
	/**
	 * this seat does not provide additional input
	 */
	WL_WEBOS_SEAT_CAPABILITY_DEFAULT = 0,
	/**
	 * this seat can provide gyroscope data, wl_webos_gyroscope
	 */
	WL_WEBOS_SEAT_CAPABILITY_GYROSCOPE = 1,
	/**
	 * this seat can provide accelerometer data, wl_webos_accelerometer
	 */
	WL_WEBOS_SEAT_CAPABILITY_ACCELEROMETER = 2,
};
#endif /* WL_WEBOS_SEAT_CAPABILITY_ENUM */

/**
 * @ingroup iface_wl_webos_seat
 * @struct wl_webos_seat_listener
 */
struct wl_webos_seat_listener {
	/**
	 * info about the seat
	 *
	 * This event will be sent immediately after the client as
	 * requested the webOS seat from wl_webos_input_manager.
	 *
	 * The designator [0, 1, ... N] indicates if this is the
	 * primary(=0), secondary, etc seat.
	 * @param id an unique identifier for the seat
	 * @param name a human readable name for the seat
	 * @param designator a value for the designation of this seat
	 */
	void (*info)(void *data,
		     struct wl_webos_seat *wl_webos_seat,
		     uint32_t id,
		     const char *name,
		     uint32_t designator,
		     uint32_t capabilities);
};

/**
 * @ingroup wl_webos_seat_iface
 */
static inline int
wl_webos_seat_add_listener(struct wl_webos_seat *wl_webos_seat,
			   const struct wl_webos_seat_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_seat,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_SEAT_GET_GYROSCOPE	0
#define WL_WEBOS_SEAT_GET_ACCELEROMETER	1

/**
 * @ingroup iface_wl_webos_seat
 */
#define WL_WEBOS_SEAT_GET_GYROSCOPE_SINCE_VERSION	1
/**
 * @ingroup iface_wl_webos_seat
 */
#define WL_WEBOS_SEAT_GET_ACCELEROMETER_SINCE_VERSION	1

/** @ingroup iface_wl_webos_seat */
static inline void
wl_webos_seat_set_user_data(struct wl_webos_seat *wl_webos_seat, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_seat, user_data);
}

/** @ingroup iface_wl_webos_seat */
static inline void *
wl_webos_seat_get_user_data(struct wl_webos_seat *wl_webos_seat)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_seat);
}

static inline uint32_t
wl_webos_seat_get_version(struct wl_webos_seat *wl_webos_seat)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_seat);
}

/** @ingroup iface_wl_webos_seat */
static inline void
wl_webos_seat_destroy(struct wl_webos_seat *wl_webos_seat)
{
	wl_proxy_destroy((struct wl_proxy *) wl_webos_seat);
}

/**
 * @ingroup iface_wl_webos_seat
 *
 * If the seat has gyroscope sensor, user can get this interface.
 */
static inline struct wl_webos_gyroscope *
wl_webos_seat_get_gyroscope(struct wl_webos_seat *wl_webos_seat)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_webos_seat,
			 WL_WEBOS_SEAT_GET_GYROSCOPE, &wl_webos_gyroscope_interface, NULL);

	return (struct wl_webos_gyroscope *) id;
}

/**
 * @ingroup iface_wl_webos_seat
 *
 * If the seat has accelerometer sensor, user can get this interface.
 */
static inline struct wl_webos_accelerometer *
wl_webos_seat_get_accelerometer(struct wl_webos_seat *wl_webos_seat)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_webos_seat,
			 WL_WEBOS_SEAT_GET_ACCELEROMETER, &wl_webos_accelerometer_interface, NULL);

	return (struct wl_webos_accelerometer *) id;
}

/**
 * @ingroup iface_wl_webos_gyroscope
 * @struct wl_webos_gyroscope_listener
 */
struct wl_webos_gyroscope_listener {
	/**
	 * sensor data from the seat
	 *
	 * The gyroscope sensor data will be delivered only if the client
	 * explicitly requested it via "requeest_data".
	 * @param x data for x-axis
	 * @param y data for y-axis
	 * @param z data for z-axis
	 */
	void (*sensor_data)(void *data,
			    struct wl_webos_gyroscope *wl_webos_gyroscope,
			    wl_fixed_t x,
			    wl_fixed_t y,
			    wl_fixed_t z);
};

/**
 * @ingroup wl_webos_gyroscope_iface
 */
static inline int
wl_webos_gyroscope_add_listener(struct wl_webos_gyroscope *wl_webos_gyroscope,
				const struct wl_webos_gyroscope_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_gyroscope,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_GYROSCOPE_REQUEST_DATA	0

/**
 * @ingroup iface_wl_webos_gyroscope
 */
#define WL_WEBOS_GYROSCOPE_REQUEST_DATA_SINCE_VERSION	1

/** @ingroup iface_wl_webos_gyroscope */
static inline void
wl_webos_gyroscope_set_user_data(struct wl_webos_gyroscope *wl_webos_gyroscope, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_gyroscope, user_data);
}

/** @ingroup iface_wl_webos_gyroscope */
static inline void *
wl_webos_gyroscope_get_user_data(struct wl_webos_gyroscope *wl_webos_gyroscope)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_gyroscope);
}

static inline uint32_t
wl_webos_gyroscope_get_version(struct wl_webos_gyroscope *wl_webos_gyroscope)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_gyroscope);
}

/** @ingroup iface_wl_webos_gyroscope */
static inline void
wl_webos_gyroscope_destroy(struct wl_webos_gyroscope *wl_webos_gyroscope)
{
	wl_proxy_destroy((struct wl_proxy *) wl_webos_gyroscope);
}

/**
 * @ingroup iface_wl_webos_gyroscope
 *
 * Requests to enable/disable sending data for gyroscope device.
 */
static inline void
wl_webos_gyroscope_request_data(struct wl_webos_gyroscope *wl_webos_gyroscope, uint32_t enabled)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_gyroscope,
			 WL_WEBOS_GYROSCOPE_REQUEST_DATA, enabled);
}

/**
 * @ingroup iface_wl_webos_accelerometer
 * @struct wl_webos_accelerometer_listener
 */
struct wl_webos_accelerometer_listener {
	/**
	 * sensor data from the seat
	 *
	 * The accelerometer sensor data will be delivered only if the
	 * client explicitly requested it via "request_data".
	 * @param x data for x-axis
	 * @param y data for y-axis
	 * @param z data for z-axis
	 */
	void (*sensor_data)(void *data,
			    struct wl_webos_accelerometer *wl_webos_accelerometer,
			    wl_fixed_t x,
			    wl_fixed_t y,
			    wl_fixed_t z);
};

/**
 * @ingroup wl_webos_accelerometer_iface
 */
static inline int
wl_webos_accelerometer_add_listener(struct wl_webos_accelerometer *wl_webos_accelerometer,
				    const struct wl_webos_accelerometer_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) wl_webos_accelerometer,
				     (void (**)(void)) listener, data);
}

#define WL_WEBOS_ACCELEROMETER_REQUEST_DATA	0

/**
 * @ingroup iface_wl_webos_accelerometer
 */
#define WL_WEBOS_ACCELEROMETER_REQUEST_DATA_SINCE_VERSION	1

/** @ingroup iface_wl_webos_accelerometer */
static inline void
wl_webos_accelerometer_set_user_data(struct wl_webos_accelerometer *wl_webos_accelerometer, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) wl_webos_accelerometer, user_data);
}

/** @ingroup iface_wl_webos_accelerometer */
static inline void *
wl_webos_accelerometer_get_user_data(struct wl_webos_accelerometer *wl_webos_accelerometer)
{
	return wl_proxy_get_user_data((struct wl_proxy *) wl_webos_accelerometer);
}

static inline uint32_t
wl_webos_accelerometer_get_version(struct wl_webos_accelerometer *wl_webos_accelerometer)
{
	return wl_proxy_get_version((struct wl_proxy *) wl_webos_accelerometer);
}

/** @ingroup iface_wl_webos_accelerometer */
static inline void
wl_webos_accelerometer_destroy(struct wl_webos_accelerometer *wl_webos_accelerometer)
{
	wl_proxy_destroy((struct wl_proxy *) wl_webos_accelerometer);
}

/**
 * @ingroup iface_wl_webos_accelerometer
 *
 * Requests to enable/disable sending data for accelerometer device.
 */
static inline void
wl_webos_accelerometer_request_data(struct wl_webos_accelerometer *wl_webos_accelerometer, uint32_t enabled)
{
	wl_proxy_marshal((struct wl_proxy *) wl_webos_accelerometer,
			 WL_WEBOS_ACCELEROMETER_REQUEST_DATA, enabled);
}

#ifdef  __cplusplus
}
#endif

#endif
